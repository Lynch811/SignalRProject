@model List<ResultBasketDto>
@{
	Layout = null;
	int count = 0;
	decimal basketTotalPrice = 0;
	decimal basketTotalPriceWithTax = 0;
	decimal tax = 0;
	decimal totalPriceWithCount = 0;
}

<!DOCTYPE html>
<html>

@await Component.InvokeAsync("_UILayoutHeadComponentPartial")

<body class="sub_page">


	@await Component.InvokeAsync("_MenuNavbarComponentsPartial")
	<br />
	<br />
	<!-- food section -->
	<div class="container-fluid">
		<div class="row px-xl-5">
			<div class="col-12">
				<nav class="breadcrumb bg-light mb-30">
					<a class="breadcrumb-item text-dark" href="/Default/Index/">Ana Sayfa</a>
					<a class="breadcrumb-item text-dark" href="/Menu/Index/">Menü</a>
					<span class="breadcrumb-item active">Sepetiniz</span>
				</nav>
			</div>
		</div>
	</div>

	<div class="container-fluid">
		<div class="row px-xl-5">
			<div class="col-lg-8 table-responsive mb-5">
				<table class="table table-light table-borderless table-hover text-center mb-0">
					<thead class="thead-dark">
						<tr>
							<th>#</th>
							<th>Ürün Adı</th>
							<th>Adet</th>
							<th>Fiyat</th>
							<th>Toplam</th>
							<th>Sil</th>
						</tr>
					</thead>
					@foreach (var group in Model.GroupBy(x=> x.ProductName))
					{
						var item = group.First();
						var itemCount = group.Count();

						basketTotalPrice = Model.Sum(x => x.Price);
						tax = basketTotalPrice / 100 * 10;
						basketTotalPriceWithTax = basketTotalPrice - tax;
						count++;

						totalPriceWithCount = item.Price * itemCount;
						<tbody class="align-middle">
							<tr>
								<td class="align-middle">@count</td>
								<td class="align-middle">@item.ProductName</td>
								<td class="align-middle">@itemCount</td>
								<td class="align-middle">@item.Price</td>
								<td class="align-middle">@totalPriceWithCount</td>
								<td class="align-middle btn-delete">
									<a class="btn btn-sm btn-danger" @* href="/Baskets/DeleteBasket/@item.BasketID" *@ onclick="confirmDelete(event, '@item.BasketID')" href="javascript:void(0);">
									<i class="fa fa-times"></i>
								</a></td>
							</tr>
						</tbody>
					}
				</table>
			</div>
			<div class="col-log-4">
				<form>
					<div class="input-group">
						<input type="text" id="couponcode" class="form-control border-1 p-4" placeholder="KuponKodunuz" />
						<div >
							<a style="height:48px;padding-top:11px;margin-left:5px;" class="btn btn-warning" id="btncouponcode">Kuponu Uygula</a>
						</div>
					</div>
				</form>
				<br />
				<h5 class="section-title position-relative text-uppercase mb-3"><span class="bg-warning pr-3">Sepet Özeti</span></h5>
				<div class="bg-light p-30 mb-5">
					<div id="container" class="border-bottom pb-2">
						<div class="d-flex justify-content-between mb-3">
							<h6>Toplam Tutar</h6>
							<h6><span id="totalprice">@basketTotalPrice</span>₺</h6>
						</div>
						<div class="d-flex justify-content-between mb-3">
							<h6 class="font-weight-medium">Kdv Tutarı</h6>
							<h6 class="font-weight-medium" id="kdv"><span>@tax</span>₺</h6>
						</div>
						<br />
					</div>
					<div class="pt-2">
						<div class="d-flex justify-content-between mt-2">
							<h5>Toplam Tutar</h5>
							<h5><span id="totalpricewithkdv">@basketTotalPrice</span>₺</h5>
						</div>
						<br />
						<button id="btnchecked" class="btn btn-block btn-warning font-weight-bold my-3">Siparişi Tamamla</button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- end food section -->
	<!-- footer section -->
	@await Component.InvokeAsync("_UILayoutFooterComponentPartial")
	@await Component.InvokeAsync("_UILayoutScriptComponentPartial")
	<!-- footer section -->
	<script>
		// function confirmDelete(event, basketID) {
		// 	event.preventDefault(); // Sayfanın yenilenmesini engelle

		// 	Swal.fire({
		// 		title: "Are you sure?",
		// 		text: "You won't be able to revert this!",
		// 		icon: "warning",
		// 		showCancelButton: true,
		// 		confirmButtonColor: "#3085d6",
		// 		cancelButtonColor: "#d33",
		// 		confirmButtonText: "Yes, delete it!"
		// 	}).then((result) => {
		// 		if (result.isConfirmed) {
		// 			// Silme isteğini AJAX ile gönder
		// 			$.ajax({
		// 				url: "/Baskets/DeleteBasket/" + basketID,
		// 				type: 'POST', // Veya 'DELETE' isteğine göre
		// 				success: function () {
		// 					Swal.fire({
		// 						title: "Deleted!",
		// 						text: "Your file has been deleted.",
		// 						icon: "success"
		// 					}).then(() => {
		// 						// Başarılı işlemden sonra sayfayı yenileyin veya öğeyi kaldırın
		// 						location.reload(); // Sayfayı yeniler
		// 					});
		// 				},
		// 				error: function () {
		// 					Swal.fire({
		// 						title: "Error!",
		// 						text: "There was an error deleting the item.",
		// 						icon: "error"
		// 					});
		// 				}
		// 			});
		// 		}
		// 	});
		// }
		function confirmDelete(event, basketID) {
			event.preventDefault(); // Sayfanın yenilenmesini engelle

			Swal.fire({
				title: "Seçtiğiniz Ürün Silinecektir!",
				text: "Bu işlem geri alınamaz",
				icon: "warning",
				showCancelButton: true,
				confirmButtonColor: "#28a745",
				cancelButtonColor: "#dc3545",
				customClass: {
					confirmButton: 'btn-confirm',
					cancelButton: 'btn-cancel'
				},
				didOpen: () => {
					const confirmButton = Swal.getConfirmButton();
					const cancelButton = Swal.getCancelButton();

					if (confirmButton) {
						confirmButton.style.border = '2px solid #28a745'; // Yeşil outline
						confirmButton.style.color = '#28a745'; // Yeşil yazı
						confirmButton.style.backgroundColor = 'transparent'; // Şeffaf arka plan
						confirmButton.style.transition = 'background-color 0.3s, color 0.3s'; // Geçiş efekti

						// Hover stili ekle
						confirmButton.addEventListener('mouseover', () => {
							confirmButton.style.backgroundColor = '#28a745'; // Yeşil arka plan
							confirmButton.style.color = '#fff'; // Beyaz yazı
						});
						confirmButton.addEventListener('mouseout', () => {
							confirmButton.style.backgroundColor = 'transparent'; // Şeffaf arka plan
							confirmButton.style.color = '#28a745'; // Yeşil yazı
						});
					}

					if (cancelButton) {
						cancelButton.style.border = '2px solid #dc3545'; // Kırmızı outline
						cancelButton.style.color = '#dc3545'; // Kırmızı yazı
						cancelButton.style.backgroundColor = 'transparent'; // Şeffaf arka plan
						cancelButton.style.transition = 'background-color 0.3s, color 0.3s'; // Geçiş efekti

						// Hover stili ekle
						cancelButton.addEventListener('mouseover', () => {
							cancelButton.style.backgroundColor = '#dc3545'; // Kırmızı arka plan
							cancelButton.style.color = '#fff'; // Beyaz yazı
						});
						cancelButton.addEventListener('mouseout', () => {
							cancelButton.style.backgroundColor = 'transparent'; // Şeffaf arka plan
							cancelButton.style.color = '#dc3545'; // Kırmızı yazı
						});
					}
				},
				confirmButtonText: "Ürünü Sil",
				cancelButtonText:"Vazgeç"
			}).then((result) => {
				if (result.isConfirmed) {
					// Silme isteğini AJAX ile gönder
					$.ajax({
						url: "/Baskets/DeleteBasket/" + basketID,
						type: 'POST', // Veya 'DELETE' isteğine göre
						success: function () {
							Swal.fire({
								title: "Ürün Başarılı Bir Şekilde Silindi!",
								// text: "Your file has been deleted.",
								icon: "success",
								showConfirmButton: false, // OK butonunu kaldırır
								timer: 1200 // 1 saniye (1000 milisaniye) boyunca gösterir
							}).then(() => {
								// 1 saniye sonra sayfayı yenile
								location.reload(); // Sayfayı yeniler
							});
						},
						error: function () {
							Swal.fire({
								title: "Opsss!",
								text: "Silme İşlemi Sırasında Bir Hata Oluştu",
								icon: "error"
							});
						}
					});
				}
			});
		}
	</script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>
